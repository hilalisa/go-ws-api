// Code generated by protoc-gen-go. DO NOT EDIT.
// source: device.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	device.proto

It has these top-level messages:
	ID
	Device
	Devices
	Empty
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Device_DeviceType int32

const (
	Device_onOff  Device_DeviceType = 0
	Device_dimmer Device_DeviceType = 1
	Device_sensor Device_DeviceType = 2
)

var Device_DeviceType_name = map[int32]string{
	0: "onOff",
	1: "dimmer",
	2: "sensor",
}
var Device_DeviceType_value = map[string]int32{
	"onOff":  0,
	"dimmer": 1,
	"sensor": 2,
}

func (x Device_DeviceType) String() string {
	return proto.EnumName(Device_DeviceType_name, int32(x))
}
func (Device_DeviceType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type ID struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *ID) Reset()                    { *m = ID{} }
func (m *ID) String() string            { return proto.CompactTextString(m) }
func (*ID) ProtoMessage()               {}
func (*ID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ID) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Device struct {
	Id       int32             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Hardware string            `protobuf:"bytes,2,opt,name=hardware" json:"hardware,omitempty"`
	Name     string            `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Location string            `protobuf:"bytes,4,opt,name=location" json:"location,omitempty"`
	Type     Device_DeviceType `protobuf:"varint,5,opt,name=type,enum=pb.Device_DeviceType" json:"type,omitempty"`
	Unit     string            `protobuf:"bytes,6,opt,name=unit" json:"unit,omitempty"`
	State    int32             `protobuf:"varint,7,opt,name=state" json:"state,omitempty"`
}

func (m *Device) Reset()                    { *m = Device{} }
func (m *Device) String() string            { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()               {}
func (*Device) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Device) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Device) GetHardware() string {
	if m != nil {
		return m.Hardware
	}
	return ""
}

func (m *Device) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Device) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *Device) GetType() Device_DeviceType {
	if m != nil {
		return m.Type
	}
	return Device_onOff
}

func (m *Device) GetUnit() string {
	if m != nil {
		return m.Unit
	}
	return ""
}

func (m *Device) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

type Devices struct {
	Device []*Device `protobuf:"bytes,1,rep,name=device" json:"device,omitempty"`
}

func (m *Devices) Reset()                    { *m = Devices{} }
func (m *Devices) String() string            { return proto.CompactTextString(m) }
func (*Devices) ProtoMessage()               {}
func (*Devices) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Devices) GetDevice() []*Device {
	if m != nil {
		return m.Device
	}
	return nil
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*ID)(nil), "pb.ID")
	proto.RegisterType((*Device)(nil), "pb.Device")
	proto.RegisterType((*Devices)(nil), "pb.Devices")
	proto.RegisterType((*Empty)(nil), "pb.Empty")
	proto.RegisterEnum("pb.Device_DeviceType", Device_DeviceType_name, Device_DeviceType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NHC service

type NHCClient interface {
	// List all registered devices
	GetAllDevices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Devices, error)
	// Get a device by ID
	GetDeviceByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Device, error)
}

type nHCClient struct {
	cc *grpc.ClientConn
}

func NewNHCClient(cc *grpc.ClientConn) NHCClient {
	return &nHCClient{cc}
}

func (c *nHCClient) GetAllDevices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Devices, error) {
	out := new(Devices)
	err := grpc.Invoke(ctx, "/pb.NHC/GetAllDevices", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nHCClient) GetDeviceByID(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := grpc.Invoke(ctx, "/pb.NHC/GetDeviceByID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NHC service

type NHCServer interface {
	// List all registered devices
	GetAllDevices(context.Context, *Empty) (*Devices, error)
	// Get a device by ID
	GetDeviceByID(context.Context, *ID) (*Device, error)
}

func RegisterNHCServer(s *grpc.Server, srv NHCServer) {
	s.RegisterService(&_NHC_serviceDesc, srv)
}

func _NHC_GetAllDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NHCServer).GetAllDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NHC/GetAllDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NHCServer).GetAllDevices(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NHC_GetDeviceByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NHCServer).GetDeviceByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NHC/GetDeviceByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NHCServer).GetDeviceByID(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

var _NHC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.NHC",
	HandlerType: (*NHCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllDevices",
			Handler:    _NHC_GetAllDevices_Handler,
		},
		{
			MethodName: "GetDeviceByID",
			Handler:    _NHC_GetDeviceByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "device.proto",
}

func init() { proto.RegisterFile("device.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 353 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xcf, 0x4e, 0xdb, 0x40,
	0x10, 0xc6, 0xbb, 0x4e, 0xec, 0x34, 0x93, 0x36, 0xb2, 0xa6, 0x49, 0xb5, 0x72, 0x7b, 0xb0, 0xf6,
	0xe4, 0x1e, 0x1a, 0x8b, 0xf0, 0x00, 0xfc, 0x33, 0x82, 0x5c, 0x40, 0xb2, 0x78, 0x01, 0x27, 0xde,
	0x84, 0x95, 0x6c, 0xaf, 0x65, 0x2f, 0x41, 0x16, 0xe2, 0xc2, 0x89, 0x3b, 0x8f, 0xc6, 0x2b, 0x70,
	0xe2, 0x29, 0x90, 0x77, 0x13, 0x02, 0x9c, 0x3c, 0xe3, 0xf9, 0xbe, 0xdf, 0x37, 0xda, 0x81, 0x1f,
	0x29, 0x5f, 0x8b, 0x05, 0x9f, 0x94, 0x95, 0x54, 0x12, 0xad, 0x72, 0xee, 0xfd, 0x5d, 0x49, 0xb9,
	0xca, 0x78, 0x98, 0x94, 0x22, 0x4c, 0x8a, 0x42, 0xaa, 0x44, 0x09, 0x59, 0xd4, 0x46, 0xc1, 0x46,
	0x60, 0xcd, 0x22, 0x1c, 0x82, 0x25, 0x52, 0x4a, 0x7c, 0x12, 0xd8, 0xb1, 0x25, 0x52, 0xf6, 0x4a,
	0xc0, 0x89, 0x34, 0xe8, 0xeb, 0x08, 0x3d, 0xf8, 0x7e, 0x9d, 0x54, 0xe9, 0x6d, 0x52, 0x71, 0x6a,
	0xf9, 0x24, 0xe8, 0xc7, 0xef, 0x3d, 0x22, 0x74, 0x8b, 0x24, 0xe7, 0xb4, 0xa3, 0xff, 0xeb, 0xba,
	0xd5, 0x67, 0x72, 0xa1, 0x33, 0x69, 0xd7, 0xe8, 0xb7, 0x3d, 0xfe, 0x83, 0xae, 0x6a, 0x4a, 0x4e,
	0x6d, 0x9f, 0x04, 0xc3, 0xe9, 0x78, 0x52, 0xce, 0x27, 0x26, 0x75, 0xf3, 0xb9, 0x6a, 0x4a, 0x1e,
	0x6b, 0x49, 0x8b, 0xbe, 0x29, 0x84, 0xa2, 0x8e, 0x41, 0xb7, 0x35, 0x8e, 0xc0, 0xae, 0x55, 0xa2,
	0x38, 0xed, 0xe9, 0xed, 0x4c, 0xc3, 0x42, 0x80, 0x9d, 0x1b, 0xfb, 0x60, 0xcb, 0xe2, 0x72, 0xb9,
	0x74, 0xbf, 0x21, 0x80, 0x93, 0x8a, 0x3c, 0xe7, 0x95, 0x4b, 0xda, 0xba, 0xe6, 0x45, 0x2d, 0x2b,
	0xd7, 0x62, 0xff, 0xa1, 0x67, 0x0c, 0x35, 0x32, 0x70, 0xcc, 0xfb, 0x51, 0xe2, 0x77, 0x82, 0xc1,
	0x14, 0x76, 0x2b, 0xc5, 0x9b, 0x09, 0xeb, 0x81, 0x7d, 0x9a, 0x97, 0xaa, 0x99, 0x3e, 0x12, 0xe8,
	0x5c, 0x9c, 0x9f, 0xe0, 0x01, 0xfc, 0x3c, 0xe3, 0xea, 0x28, 0xcb, 0xb6, 0x94, 0x7e, 0xeb, 0xd2,
	0x1a, 0x6f, 0xb0, 0x03, 0xd4, 0xec, 0xf7, 0xc3, 0xf3, 0xcb, 0x93, 0xe5, 0xe2, 0x50, 0xdf, 0x62,
	0xbd, 0x17, 0x1a, 0x22, 0x1e, 0x6a, 0x80, 0x51, 0x1d, 0x37, 0xb3, 0x08, 0x9d, 0xd6, 0x35, 0x8b,
	0xbc, 0x0f, 0xf1, 0xec, 0x8f, 0x36, 0x8f, 0xf1, 0xd7, 0x67, 0x73, 0x78, 0x27, 0xd2, 0xfb, 0xb9,
	0xa3, 0x8f, 0xb9, 0xff, 0x16, 0x00, 0x00, 0xff, 0xff, 0x4d, 0xfa, 0x6e, 0x7d, 0xfe, 0x01, 0x00,
	0x00,
}
